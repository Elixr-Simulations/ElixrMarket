@page
@model ElixrMarket.Web.Pages.UploadModel
@namespace Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery antiForgery
@{
    var afToken = antiForgery.GetAndStoreTokens(HttpContext).RequestToken;
}

@section Styles {
    <link rel="stylesheet" href="~/lib/loading-bar/loading-bar.min.css" />
}

<div id="upload">
    @* <form method="post" enctype="multipart/form-data" asp-page-handler="Upload" id="form-container"> *@
    <div id="form-container">
        <h5 class="title">Basic information</h5>
        <input class="form-control" id="product-name" placeholder="Name"/>
        <textarea class="form-control" id="product-desc" placeholder="Description" ></textarea>
        <div>
            <div class="align-top mb-1">Genres</div>
            <select class="form-control w-100" id="product-genres" asp-items="Model.GenreOptions" multiple></select>
        </div>
        <input class="form-control"id="product-price" type="number" placeholder="Price" />
        <h5 class="title">Requirements</h5>
        <div class="d-flex">
            <input class="form-control w-100 mr-2" type="number" placeholder="Storage" id="storage" />
            <select class="form-control w-25" id="storage-unit">
                <option value="MB">MB</option>
                <option value="GB">GB</option>
            </select>
        </div>
        <div id="reqs">
            <div class="req-container">
                <span>OS</span>
                <select class="form-control" multiple style="height: 100%;">
                    <option value="Windows">Windows</option>
                    <option value="Mac">MacOS</option>
                    <option value="Linux">Linux</option>
                </select>

            </div>
            <div class="req-container">
                <span>Minimum</span>
                <input class="form-control" type="text" placeholder="CPU" id="min-cpu" />
                <input class="form-control" type="text" placeholder="GPU" id="min-gpu" />
                <input class="form-control" type="text" placeholder="Memory" id="min-ram" />
            </div>
            <div class="req-container">
                <span>Recommended</span>
                <input class="form-control" type="text" placeholder="CPU" id="max-cpu" />
                <input class="form-control" type="text" placeholder="GPU" id="max-gpu" />
                <input class="form-control" type="text" placeholder="Memory" id="max-ram" />
            </div>
        </div>
        <h5 class="title">Media</h5>
        <div>
            <label >Select carousel media:</label>
            <input id="carousel" type="file" accept="image/*,video/*" multiple/>
        </div>
        <div>
            <label >Select thumbnail photo:</label>
            <input id="thumb" accept="image/*" type="file"/>
        </div>
        <h5 class="title">Application access</h5>
        <div>
            <div class="mb-2">
                <input onchange="toggleBinUpload()" id="bin-toggle" checked type="checkbox" />
                <span>Uploading binary file?</span>
            </div>
            <div id="bin-uploader">
                <label>Select installer file:</label>
                <input id="bin-file" type="file" />
            </div>
        </div>
        <button class="btn btn-success mt-3" id="submit" type="submit">Submit</button>
    </div>
    <div id="upload-progress-container" >
        <h5 id="status">Uploading submission: <span id="upload-percentage"></span></h5>
        <progress id="progress" max="100" value="0"></progress>
        <a class="btn btn-success" style="display: none" id="product-button" >Go to product page</a>
    </div>
    @* </form> *@

    <style>
        #upload #form-container {
            margin: auto;
            width: 50%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            gap: 1rem;
        }

        #upload #reqs {
            display: flex;
            gap: 1.5rem;
        }

        #upload .req-container {
            display: flex;
            flex-direction: column;
            gap: .5rem;
        }
        
        #upload #upload-progress-container {
            height: 70vh;
            margin: auto;
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        #upload .title {
            padding-bottom: .5rem;
            padding-top: .5rem;
            border-bottom: 1px solid black;
        }

        #upload progress {
            width: 50%;
        }

        #upload #price-genre {
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
        }
    </style>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js" integrity="sha512-bZS47S7sPOxkjU/4Bt0zrhEtWx0y0CRkhEp8IckzK+ltifIIE9EMIMTuT/mEzoIMewUINruDBIR/jJnbguonqQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/tus-js-client@latest/dist/tus.min.js" crossorigin="anonymous" ></script>
    <script src="~/lib/loading-bar/loading-bar.min.js" ></script>
    <script>
        const toggleBinUpload = () => {
            const binToggler = document.getElementById('bin-toggle');
            const binUploader = document.getElementById('bin-uploader');
            
            binUploader.disabled = !binToggler.checked

            if (binToggler.checked) {
                binUploader.style.display = "block";
            }
            else {
                binUploader.style.display = "none";
            }
        };
    
        document.getElementById('submit').onclick = async () => {
            document.getElementById('form-container').style.display = "none";
            document.getElementById('upload-progress-container').style.display = "flex";
            document.getElementById('upload-percentage').innerText = 'Saving information...';

            const name = document.getElementById('product-name').value;
            const desc = document.getElementById('product-desc').value;
            const price = document.getElementById('product-price').value;
            const genres = $('#product-genres').val().join(',');
            const storage = document.getElementById('storage').value + document.getElementById('storage-unit').value;
            const minCPU = document.getElementById('min-cpu').value;
            const minGPU = document.getElementById('min-gpu').value;
            const minRAM = document.getElementById('min-ram').value;
            const maxCPU = document.getElementById('max-cpu').value;
            const maxGPU = document.getElementById('max-gpu').value;
            const maxRAM = document.getElementById('max-ram').value;
            const carouselMedia = document.getElementById('carousel').files;
            const thumb = document.getElementById('thumb').files[0];
            let formData = new FormData();
            formData.append('name', name);
            formData.append('desc', desc);
            formData.append('price', price);
            formData.append('genres', genres);
            formData.append('storage', storage);
            formData.append('minCPU', minCPU);
            formData.append('minGPU', minGPU);
            formData.append('minRAM', minRAM);
            formData.append('maxCPU', maxCPU);
            formData.append('maxGPU', maxGPU);
            formData.append('maxRAM', maxRAM);
            formData.append('thumbPhoto', thumb);
            for (let i = 0; i < carouselMedia.length; i++) {
                formData.append('carouselMedia', carouselMedia[i]);    
            }

            const resp = await axios({
                method: 'post',
                url: '/Upload',
                data: formData,
                withCredentials: true,
                headers: {
                    'Content-Type': 'multipart/form-data',
                    'RequestVerificationToken': '@afToken'
                }
            });
            
            let productId;
            let productName;

            if (resp.status != 200) {
                console.log(resp.error);
                return;
            } 
            else {
                productId = resp.data.id;
                productName = resp.data.name;

                console.log(productId);
                productCreated = true;
                console.log(productCreated)
            };

            if (document.getElementById('bin-toggle').checked) {
                let percentage;
                const binFile = document.getElementById('bin-file').files[0];
                const upload = new tus.Upload(binFile, {
                    endpoint: "/binfiles", 
                    retryDelays: [0, 3000, 5000, 10000, 20000],
                    metadata: {
                        filetype: binFile.type,
                        productName: productName,
                        productId: productId
                    },
                    headers: {
                        'RequestVerificationToken': '@afToken'
                    },
                    onBeforeRequest: (req) => {
                        req.getUnderlyingObject().withCredentials = true;
                    },
                    onError: function(error) {
                        console.log("Failed because: " + error);
                    },
                    onProgress: function(bytesUploaded, bytesTotal) {
                        const percentage = (bytesUploaded / bytesTotal * 100).toFixed(2);
                        document.getElementById('upload-percentage').innerText = percentage + '%';
                        document.getElementById('progress').value = percentage;
                    },
                    onSuccess: function() {
                        let productBtn = document.getElementById('product-button');
                        productBtn.style.display = 'block';
                        productBtn.href = '/Details/' + productId + "/";

                        document.getElementById('progress').style.display = 'none';
                }});

                // Check if there are any previous uploads to continue.
                upload.findPreviousUploads().then(function (previousUploads) {
                    // Found previous uploads so we select the first one. 
                    if (previousUploads.length) {
                        upload.resumeFromPreviousUpload(previousUploads[0])
                    }

                    // Start the upload
                    upload.start()
                });
            }
            else {
                document.getElementById('status').innerText = 'Upload finished!';
                document.getElementById('upload-progress-container').style.display = "flex";
                let productBtn = document.getElementById('product-button');
                productBtn.style.display = 'block';
                productBtn.href = '/Details/' + productId + "/";

                document.getElementById('progress').style.display = 'none';
            }
            
        };
    </script>
}